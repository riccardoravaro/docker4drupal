<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\Validator;

/**
 * Stores the node-independent state of a validation run.
 *
 * When the validator validates a graph of objects, it uses two classes to
 * store the state during the validation:
 *
 * <ul>
 * <li>For each node in the validation graph (objects, properties, getters) the
 * validator creates an instance of {@link ExecutionContextInterface} that
 * stores the information about that node.</li>
 * <li>One single <tt>GlobalExecutionContextInterface</tt> stores the state
 * that is independent of the current node.</li>
 * </ul>
 *
 * @author Bernhard Schussek <bschussek@gmail.com>
 *
 * @deprecated since version 2.5, to be removed in 3.0.
 *             Use {@link Context\ExecutionContextInterface} instead.
 */
interface GlobalExecutionContextInterface
{
    /**
     * Returns the violations generated by the validator so far.
     *
<<<<<<< HEAD
     * @return ConstraintViolationListInterface A list of constraint violations.
=======
     * @return ConstraintViolationListInterface A list of constraint violations
>>>>>>> ea75da0d6d82e55b23a2a2f5ed629e3b52ee75d9
     */
    public function getViolations();

    /**
     * Returns the value at which validation was started in the object graph.
     *
<<<<<<< HEAD
     * @return mixed The root value.
=======
     * @return mixed The root value
>>>>>>> ea75da0d6d82e55b23a2a2f5ed629e3b52ee75d9
     *
     * @see ExecutionContextInterface::getRoot()
     */
    public function getRoot();

    /**
     * Returns the visitor instance used to validate the object graph nodes.
     *
<<<<<<< HEAD
     * @return ValidationVisitorInterface The validation visitor.
=======
     * @return ValidationVisitorInterface The validation visitor
>>>>>>> ea75da0d6d82e55b23a2a2f5ed629e3b52ee75d9
     */
    public function getVisitor();

    /**
     * Returns the factory for constraint validators.
     *
<<<<<<< HEAD
     * @return ConstraintValidatorFactoryInterface The constraint validator factory.
=======
     * @return ConstraintValidatorFactoryInterface The constraint validator factory
>>>>>>> ea75da0d6d82e55b23a2a2f5ed629e3b52ee75d9
     */
    public function getValidatorFactory();

    /**
     * Returns the factory for validation metadata objects.
     *
<<<<<<< HEAD
     * @return MetadataFactoryInterface The metadata factory.
=======
     * @return MetadataFactoryInterface The metadata factory
>>>>>>> ea75da0d6d82e55b23a2a2f5ed629e3b52ee75d9
     */
    public function getMetadataFactory();
}
